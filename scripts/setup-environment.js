import fs from "fs"
import path from "path"

console.log("üöÄ Setting up AgentPay Environment Variables...\n")

// Essential environment variables for AgentPay
const requiredEnvVars = {
  // Core Payment Configuration
  PAYEE_ADDRESS: {
    description: "Your MetaMask wallet address to receive payments",
    example: "0x742d35Cc6634C0532925a3b8D4C9db96590c6C87",
    required: true,
  },
  CONFIRMATIONS_REQUIRED: {
    description: "Number of blockchain confirmations required",
    example: "3",
    required: true,
  },

  // Blockchain RPC URLs (at least one required)
  ETHEREUM_RPC_URL: {
    description: "Ethereum RPC URL (Alchemy/Infura)",
    example: "https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY",
    required: false,
  },
  POLYGON_RPC_URL: {
    description: "Polygon RPC URL (recommended for lower fees)",
    example: "https://polygon-mainnet.g.alchemy.com/v2/YOUR_API_KEY",
    required: true,
  },
  BSC_RPC_URL: {
    description: "Binance Smart Chain RPC URL",
    example: "https://bsc-dataseed.binance.org/",
    required: false,
  },

  // AI Service Keys (for automated service delivery)
  OPENAI_API_KEY: {
    description: "OpenAI API key for content generation",
    example: "sk-proj-...",
    required: true,
  },
  GOOGLE_AI_API_KEY: {
    description: "Google AI Studio API key",
    example: "AIza...",
    required: false,
  },
  ANTHROPIC_API_KEY: {
    description: "Anthropic Claude API key",
    example: "sk-ant-...",
    required: false,
  },

  // Image Generation
  REPLICATE_API_TOKEN: {
    description: "Replicate API token for image generation",
    example: "r8_...",
    required: false,
  },
  STABILITY_API_KEY: {
    description: "Stability AI API key for image generation",
    example: "sk-...",
    required: false,
  },

  // Application Configuration
  PORT: {
    description: "Backend server port",
    example: "3001",
    required: false,
  },
  NEXT_PUBLIC_API_URL: {
    description: "Frontend API endpoint",
    example: "http://localhost:3001",
    required: true,
  },
  NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: {
    description: "WalletConnect project ID",
    example: "a1b2c3d4e5f6...",
    required: true,
  },

  // File Storage
  STORAGE_DIR: {
    description: "Directory for storing generated files",
    example: "./storage",
    required: false,
  },
  OUTPUT_DIR: {
    description: "Directory for output files",
    example: "./output",
    required: false,
  },

  // Webhook Configuration
  AGENT_DELIVERY_URL: {
    description: "Webhook URL for service delivery notifications",
    example: "https://your-domain.com/webhook/delivery",
    required: false,
  },

  // Debug Mode
  DEBUG: {
    description: "Enable debug logging",
    example: "true",
    required: false,
  },
}

// Check if .env.local exists
const envPath = ".env.local"
const existingEnv = {}

if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, "utf8")
  envContent.split("\n").forEach((line) => {
    const [key, value] = line.split("=")
    if (key && value) {
      existingEnv[key.trim()] = value.trim()
    }
  })
  console.log("üìÑ Found existing .env.local file\n")
} else {
  console.log("üìÑ Creating new .env.local file\n")
}

// Generate environment file content
let envContent = "# AgentPay Environment Configuration\n"
envContent += "# Generated by setup-environment.js\n\n"

// Group variables by category
const categories = {
  "Core Payment": ["PAYEE_ADDRESS", "CONFIRMATIONS_REQUIRED"],
  "Blockchain RPC": ["ETHEREUM_RPC_URL", "POLYGON_RPC_URL", "BSC_RPC_URL"],
  "AI Services": ["OPENAI_API_KEY", "GOOGLE_AI_API_KEY", "ANTHROPIC_API_KEY"],
  "Image Generation": ["REPLICATE_API_TOKEN", "STABILITY_API_KEY"],
  Application: ["PORT", "NEXT_PUBLIC_API_URL", "NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID"],
  "Storage & Delivery": ["STORAGE_DIR", "OUTPUT_DIR", "AGENT_DELIVERY_URL", "DEBUG"],
}

Object.entries(categories).forEach(([category, keys]) => {
  envContent += `# ${category}\n`
  keys.forEach((key) => {
    const config = requiredEnvVars[key]
    if (config) {
      envContent += `# ${config.description}\n`
      if (config.required) {
        envContent += `# REQUIRED\n`
      }

      const currentValue = existingEnv[key]
      if (currentValue) {
        envContent += `${key}=${currentValue}\n`
      } else {
        envContent += `${key}=${config.example}\n`
      }
      envContent += "\n"
    }
  })
})

// Add token addresses
envContent += "# Token Contract Addresses\n"
envContent += "# USDC and USDT addresses on supported chains\n"
envContent += "NEXT_PUBLIC_ETHEREUM_USDC=0xA0b86a33E6441b8C4505B8C4505B8C4505B8C450\n"
envContent += "NEXT_PUBLIC_ETHEREUM_USDT=0xdAC17F958D2ee523a2206206994597C13D831ec7\n"
envContent += "NEXT_PUBLIC_POLYGON_USDC=0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\n"
envContent += "NEXT_PUBLIC_POLYGON_USDT=0xc2132D05D31c914a87C6611C10748AEb04B58e8F\n"
envContent += "NEXT_PUBLIC_BSC_USDC=0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\n"
envContent += "NEXT_PUBLIC_BSC_USDT=0x55d398326f99059fF775485246999027B3197955\n\n"

// Write the file
fs.writeFileSync(envPath, envContent)

console.log("‚úÖ Environment file created/updated successfully!")
console.log(`üìÅ Location: ${path.resolve(envPath)}\n`)

// Show setup instructions
console.log("üîß SETUP INSTRUCTIONS:\n")
console.log("1. REQUIRED - Set your MetaMask address:")
console.log("   PAYEE_ADDRESS=0xYourWalletAddress\n")

console.log("2. REQUIRED - Get a Polygon RPC URL from Alchemy:")
console.log("   - Visit: https://dashboard.alchemy.com/")
console.log("   - Create account and new app")
console.log("   - Copy the HTTPS URL\n")

console.log("3. REQUIRED - Get OpenAI API key:")
console.log("   - Visit: https://platform.openai.com/api-keys")
console.log("   - Create new secret key\n")

console.log("4. REQUIRED - Get WalletConnect Project ID:")
console.log("   - Visit: https://cloud.walletconnect.com/")
console.log("   - Create new project\n")

console.log("5. OPTIONAL - Additional AI services for enhanced features:")
console.log("   - Google AI Studio: https://makersuite.google.com/app/apikey")
console.log("   - Replicate: https://replicate.com/account/api-tokens")
console.log("   - Stability AI: https://platform.stability.ai/account/keys\n")

console.log("üöÄ After setting up keys, run: npm run dev")
console.log("üí° Start with Polygon for lower transaction fees!")
