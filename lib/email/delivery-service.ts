import { getEmailService, EmailAttachment } from "@/lib/email/unified-email-service"
import archiver from "archiver"
import fs from "fs"
import path from "path"

interface Invoice {
  id: string
  invoiceId: string
  serviceType: string
  description: string
  buyerContact?: string
  payer: string
  amount: number
  status: string
}

interface DeliverableFile {
  name: string
  content: string
  type: string
  path?: string
}

export class DeliveryService {
  private emailService = getEmailService()

  constructor() {
    // Email service is now handled by unified service
  }

  async deliverResults(invoice: Invoice, results: any) {
    try {
      console.log(`Starting delivery for invoice ${invoice.invoiceId}`)
      
      // Create deliverable files
      const files = await this.createDeliverableFiles(invoice, results)
      
      // Create ZIP archive
      const zipBuffer = await this.createZipArchive(files, invoice.invoiceId)
      
      // Send email with attachments
      await this.sendDeliveryEmail(invoice, zipBuffer)
      
      // Save files for download
      const downloadUrl = await this.saveFilesForDownload(invoice.id, files, zipBuffer)
      
      console.log(`Delivery completed for invoice ${invoice.invoiceId}`)
      return { success: true, downloadUrl }
    } catch (error) {
      console.error("Delivery error:", error)
      throw new Error(`Failed to deliver results: ${error instanceof Error ? error.message : String(error)}`)
    }
  }

  private async createDeliverableFiles(invoice: Invoice, results: any): Promise<DeliverableFile[]> {
    const files: DeliverableFile[] = []
    
    switch (invoice.serviceType.toUpperCase()) {
      case "LOGO":
        files.push(...await this.generateLogoFiles(results))
        break
        
      case "PROMPT":
        files.push(...await this.createPromptFiles(results))
        break
        
      case "DATA":
        files.push(...await this.createDataAnalysisFiles(results))
        break
        
      case "WEBSITE":
        files.push(...await this.createWebsiteFiles(results))
        break
        
      case "RESUME":
        files.push(...await this.createResumeFiles(results))
        break
        
      default:
        // Generic service files
        files.push({
          name: "service_results.md",
          content: results.content || "Service completed successfully",
          type: "text/markdown"
        })
    }
    
    // Add invoice summary
    files.push(this.createInvoiceSummary(invoice))
    
    return files
  }

  private async generateLogoFiles(results: any): Promise<DeliverableFile[]> {
    const files: DeliverableFile[] = []
    
    if (results.deliverables) {
      files.push(...results.deliverables.map((d: any) => ({
        name: d.name,
        content: d.content,
        type: d.type
      })))
    }
    
    // Add brand package
    files.push({
      name: "brand_package.md",
      content: `# Brand Package

${results.content}

## Files Included
- Logo design brief
- Brand guidelines  
- Color palette
- Usage instructions

Created by AgentPay AI Design Agent
`,
      type: "text/markdown"
    })
    
    return files
  }

  private async createPromptFiles(results: any): Promise<DeliverableFile[]> {
    const files: DeliverableFile[] = []
    
    if (results.deliverables) {
      files.push(...results.deliverables.map((d: any) => ({
        name: d.name,
        content: d.content,
        type: d.type
      })))
    }
    
    return files
  }

  private async createDataAnalysisFiles(results: any): Promise<DeliverableFile[]> {
    const files: DeliverableFile[] = []
    
    if (results.deliverables) {
      files.push(...results.deliverables.map((d: any) => ({
        name: d.name,
        content: d.content,
        type: d.type
      })))
    }
    
    // Add executive summary
    files.push({
      name: "executive_summary.md",
      content: `# Data Analysis - Executive Summary

${results.content}

## Analysis Delivered
- Data insights report
- Visualization recommendations
- Statistical analysis
- Actionable recommendations

Generated by AgentPay AI Data Agent
`,
      type: "text/markdown"
    })
    
    return files
  }

  private async createWebsiteFiles(results: any): Promise<DeliverableFile[]> {
    const files: DeliverableFile[] = []
    
    if (results.deliverables) {
      files.push(...results.deliverables.map((d: any) => ({
        name: d.name,
        content: d.content,
        type: d.type
      })))
    }
    
    // Add deployment guide
    files.push({
      name: "deployment_guide.md",
      content: `# Website Deployment Guide

${results.content}

## Next Steps
1. Review the website plan
2. Follow technical specifications
3. Implement SEO recommendations
4. Deploy using recommended platform

Built with AgentPay AI Web Agent
`,
      type: "text/markdown"
    })
    
    return files
  }

  private async createResumeFiles(results: any): Promise<DeliverableFile[]> {
    const files: DeliverableFile[] = []
    
    if (results.deliverables) {
      files.push(...results.deliverables.map((d: any) => ({
        name: d.name,
        content: d.content,
        type: d.type
      })))
    }
    
    return files
  }

  private createInvoiceSummary(invoice: Invoice): DeliverableFile {
    return {
      name: "invoice_summary.md",
      content: `# AgentPay Service Invoice

## Service Details
- **Invoice ID**: ${invoice.invoiceId}
- **Service**: ${invoice.serviceType}
- **Description**: ${invoice.description}
- **Amount**: $${invoice.amount}
- **Status**: ${invoice.status}

## Delivery Information
- **Delivered**: ${new Date().toLocaleString()}
- **Delivery Method**: Email + Download Portal

## Support
If you have any questions about your delivery, please contact us at support@agentpay.com

Thank you for using AgentPay!
`,
      type: "text/markdown"
    }
  }

  private async createZipArchive(files: DeliverableFile[], invoiceId: string): Promise<Buffer> {
    return new Promise((resolve, reject) => {
      const chunks: any[] = []
      const archive = archiver('zip', { zlib: { level: 9 } })
      
      archive.on('data', chunk => chunks.push(chunk))
      archive.on('end', () => resolve(Buffer.concat(chunks)))
      archive.on('error', reject)
      
      // Add files to archive
      files.forEach(file => {
        archive.append(file.content, { name: file.name })
      })
      
      archive.finalize()
    })
  }

  private async sendDeliveryEmail(invoice: Invoice, zipBuffer: Buffer) {
    const recipientEmail = invoice.buyerContact || `${invoice.payer}@placeholder.com`
    
    const attachments: EmailAttachment[] = [
      {
        filename: `AgentPay-${invoice.serviceType}-${Date.now()}.zip`,
        content: zipBuffer,
        contentType: "application/zip"
      }
    ]

    const emailContext = {
      serviceType: invoice.serviceType,
      description: invoice.description,
      invoiceId: invoice.invoiceId,
      amount: invoice.amount.toString(),
      deliveredAt: new Date().toLocaleString(),
      dashboardUrl: `${process.env.NEXTAUTH_URL}/dashboard`,
      attachments
    }

    const success = await this.emailService.sendEmail(
      'service_delivery',
      { to: recipientEmail },
      emailContext
    )

    if (!success) {
      throw new Error('Failed to send delivery email')
    }
  }

  private async saveFilesForDownload(invoiceId: string, files: DeliverableFile[], zipBuffer: Buffer): Promise<string> {
    // Create delivery directory if it doesn't exist
    const deliveryDir = path.join(process.cwd(), "public", "deliveries")
    if (!fs.existsSync(deliveryDir)) {
      fs.mkdirSync(deliveryDir, { recursive: true })
    }
    
    // Save ZIP file
    const zipFileName = `${invoiceId}-${Date.now()}.zip`
    const zipFilePath = path.join(deliveryDir, zipFileName)
    fs.writeFileSync(zipFilePath, new Uint8Array(zipBuffer))
    
    // Return download URL
    return `/deliveries/${zipFileName}`
  }

  async testEmailConnection(): Promise<boolean> {
    return await this.emailService.testConnection()
  }
}